const jsonSql = require('json-sql')({
  wrappedIdentifiers: false,
});

const specialWords = [
  'action',
  'add',
  'aggregate',
  'all',
  'alter',
  'after',
  'and',
  'as',
  'asc',
  'avg',
  'avg_row_length',
  'auto_increment',
  'between',
  'bigint',
  'bit',
  'binary',
  'blob',
  'bool',
  'both',
  'by',
  'cascade',
  'case',
  'char',
  'character',
  'change',
  'check',
  'checksum',
  'column',
  'columns',
  'comment',
  'constraint',
  'create',
  'cross',
  'current_date',
  'current_time',
  'current_timestamp',
  'data ',
  'database ',
  'databases',
  'date',
  'datetime',
  'day',
  'day_hour',
  'day_minute',
  'day_second',
  'dayofmonth',
  'dayofweek',
  'dayofyear',
  'dec',
  'decimal',
  'default',
  'delayed',
  'delay_key_write',
  'delete',
  'desc',
  'describe',
  'distinct ',
  'distinctrow ',
  'double',
  'drop',
  'end',
  'else',
  'escape',
  'escaped',
  'enclosed',
  'enum ',
  'explain',
  'exists',
  'fields',
  'file',
  'first',
  'float',
  'float4',
  'float8',
  'flush',
  'foreign',
  'from',
  'for',
  'full',
  'function',
  'global',
  'grant',
  'grants',
  'group',
  'having',
  'heap',
  'high_priority',
  'hour',
  'hour_minute',
  'hour_second',
  'hosts',
  'identified',
  'ignore',
  'in',
  'index',
  'infile',
  'inner',
  'insert',
  'insert_id',
  'int',
  'integer',
  'interval',
  'int1',
  'int2',
  'int3',
  'int4',
  'int8',
  'into',
  'if',
  'is',
  'isam',
  'join',
  'key',
  'keys',
  'kill',
  'last_insert_id',
  'leading',
  'left',
  'length',
  'like',
  'lines',
  'limit',
  'load',
  'local',
  'lock',
  'logs',
  'long',
  'longblob',
  'longtext',
  'low_priority',
  'max',
  'max_rows',
  'match',
  'mediumblob',
  'mediumtext',
  'mediumint',
  'middleint',
  'min_rows',
  'minute',
  'minute_second',
  'modify',
  'month',
  'monthname',
  'myisam',
  'natural',
  'numeric',
  'no',
  'not',
  'null',
  'on',
  'optimize',
  'option',
  'optionally',
  'or',
  'order',
  'outer',
  'outfile',
  'pack_keys',
  'partial',
  'password',
  'precision',
  'primary',
  'procedure',
  'process',
  'processlist',
  'privileges',
  'read',
  'real',
  'references',
  'reload',
  'regexp',
  'rename',
  'replace',
  'restrict',
  'returns',
  'revoke',
  'rlike',
  'row',
  'rows',
  'second',
  'select',
  'set',
  'show',
  'shutdown',
  'smallint',
  'soname',
  'sql_big_tables',
  'sql_big_selects',
  'sql_low_priority_updates',
  'sql_log_off sql_log_update',
  'sql_select_limit',
  'sql_small_result',
  'sql_big_result',
  'sql_warnings',
  'straight_join',
  'starting ',
  'status',
  'string',
  'table',
  'tables',
  'temporary',
  'terminated',
  'text',
  'then',
  'time',
  'timestamp',
  'tinyblob',
  'tinytext',
  'tinyint',
  'trailing',
  'to',
  'type',
  'use',
  'using',
  'unique',
  'unlock',
  'unsigned',
  'update',
  'usage',
  'values',
  'varchar',
  'vvariables',
  'varying',
  'varbinary',
  'with',
  'write',
  'when',
  'where',
  'year',
  'year_month',
  'zerofill',
];
const alias = [
  'a',
  'b',
  'c',
  'd',
  'e',
  'f',
  'g',
  'h',
  'i',
  'j',
  'k',
  'l',
  'm',
  'n',
  'o',
  'p',
  'q',
  'r',
  's',
  't',
  'u',
  'v',
  'w',
  'x',
  'y',
  'z',
];

class SQL {
  sql = '';
  constructor() {}

  public static build(nodeData: any[] = [], linkData: any[] = []) {
    if (nodeData.length > 0) {
      nodeData = nodeData.map((n, i) => ({ ...n, alias: alias[i] }));
      const [first, ...last] = nodeData;

      let fields: any[] = [];
      nodeData.forEach(data => {
        const columns = data.schema.map(field => {
          if (specialWords.includes(field.name)) {
            return {
              name: '`' + field.name + '`',
              table: data.alias,
              alias: `${data.alias}_${field.name}`,
            };
          }
          return {
            name: field.name,
            table: data.alias,
            alias: `${data.alias}_${field.name}`,
          };
        });
        fields = [...fields, ...columns];
      });
      const sql = jsonSql.build({
        type: 'select',
        table: first.tableName,
        alias: first.alias,
        fields: fields,
        join: linkData.map(link => {
          const fromTable = nodeData.find(n => n.key === link.from);
          const toTable = nodeData.find(n => n.key === link.to);
          return {
            type: 'left',
            table: toTable.tableName,
            alias: toTable.alias,
            on: {
              [`${fromTable.alias}.${link.fromField}`]: `${toTable.alias}.${link.toField}`,
            },
          };
        }),
      });
      return `${sql.query}`;
    }
  }
}
export default new SQL();
